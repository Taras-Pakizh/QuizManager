@using QuizManager.Helpers;
@using QuizManager.DBModels;
@using QuizManager.ModelViews;
@model QuizLinkView
@{
    ViewBag.Title = "GetLink";
}

<div class="row well mywell">
    
    <div class="pull-left myhmargin">
        @RenderHelper.Back(Url.Action("Index", "Cabinet"))
    </div>

    <div class="pull-left myhmargin">
        <h4>Quiz:<strong>@Model.Quiz.Name</strong></h4>
    </div>

</div>

<div class="myhmargin">

    @Html.Partial("TableByProperty", new TableView()
    {
        data = new List<Quiz>() { Model.Quiz },
        PropertyNames = new List<string>()
        {
            "Name", "Type", "TimeLimit", "UserData", "Value", "TimeLimitType"
        },
        HeaderNames = new List<string>()
        {
            "Name", "Type", "Time limit", "Authorization type", "Highest mark", "Time limit type"
        }
    })

    @if (!Model.IsQuizValid)
    {
        <div class="form-group">

            <div class="form-group">

                <strong>This quiz is not finished</strong>

            </div>

            <div id="errors" class="form-group">

                @foreach (var error in Model.Errors)
                {
                    <div class="alert alert-danger">
                        @error
                    </div>
                }

            </div>

        </div>
    }
    else
    {
        if (Model.IsRefExists)
        {
            <div class="form-inline myhmargin">

                <label>Exist link: </label>

                <input id="link" type="text" value="@Model.Link" class="form-control" />

                <button type="button" class="copy-link btn btn-info mycolor">Copy Link</button>

            </div>
        }

        <br />

        <div class="myhmargin">

            <div class="form-group form-inline">
                @using (Html.BeginForm("GetLink", "Cabinet", FormMethod.Post))
                {
                    @Html.HiddenFor(x=>x.Quiz.Id)
                    
                    <div class="form-group">
                        @Html.TextBoxFor(x=>x.Reference.AttemptCount, 
                            new { @class="form-control", type="number", id="count" })
                    </div>

                    <div class="form-group">
                        @Html.EnumDropDownListFor(x=>x.Reference.Type, 
                            new { @class="form-control", id="enum" })
                    </div>

                    <div class="form-group">
                        @Html.TextBoxFor(x=>x.Reference.Deadline, "{0:yyyy-MM-ddTHH:mm}",
                            new { @class = "form-control", type = "datetime-local", required="required" })
                    </div>

                    <input type="submit" class="btn btn-info mycolor" value="Generate link" />
                }
            </div>

            @if (Model.IsRefExists)
            {
                <div class="form-group">
                    @using (Html.BeginForm("DeleteLink", "Cabinet", FormMethod.Get))
                    {
                        <input type="hidden" name="Id" value="@Model.Reference.Id" />
                        <input type="submit" class="btn btn-danger mycolor" value="Delete link" />
                    }
                </div>
            }

        </div>

    }

</div>




@section scripts
{
    <script>

        var first = true;

        $(document).ready(function () {

            function ChangeSelection() {
                var enumList = document.getElementById('enum');

                var val = enumList.value;

                var count = document.getElementById('count');

                if (val == 0) {
                    //byreference
                    count.setAttribute('min', 0);
                    if (!first) {
                        count.value = 0;
                    }
                    count.setAttribute('disabled', 'disabled');
                }

                if (val == 1) {
                    //bygroup
                    count.setAttribute('min', 1);
                    if (!first) {
                        count.value = 1;
                    }
                    count.disabled = false;
                }

                first = false;
            }

            ChangeSelection();

            $(document).on('change', '#enum', function () {

                ChangeSelection();
            });

            $(document).on('click', 'button.copy-link', function () {

                var link = document.getElementById('link');

                link.select();
                link.setSelectionRange(0, 99999);

                document.execCommand("copy");

                alert("Link is copied to clipboard: " + link.value);

            });

        });

    </script>
}