@using QuizManager.Helpers;
@using QuizManager.DBModels;
@using QuizManager.ModelViews;
@using QuizManager.Helpers.Models;
@using QuizManager.XmlModels;

@model RedactorContainerView

<div class="container">

    <div class="row">

        <div class="pull-right form-inline">

            @using (Ajax.BeginForm("Change", new AjaxOptions() { UpdateTargetId = "inner" }))
            {
                @Html.HiddenFor(x => x.Quiz.Id)

                @Html.HiddenFor(x => x.Question.Id)

                <div class="form-group">
                    @Html.EnumDropDownListFor(x => x.Question.Type, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.EnumDropDownListFor(x => x.Question.Obligation, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Question.OrderNumber, "Order:")
                    @Html.TextBoxFor(x => x.Question.OrderNumber, new { type = "number", @class = "form-control", min = "1" })
                </div>

                <div class="form-group">
                    <input type="submit" class="btn btn-default" value="Select" />
                </div>
            }

        </div>

    </div>

    <br/>

    <div class="row form-group pull-right">
        @using (Html.BeginForm("Delete", "Constructor", FormMethod.Get))
        {
            <input type="hidden" value="@Model.Question.Id" name="id" />
            <input type="submit" class="btn btn-danger" value="Delete" />
        }
    </div>

</div>

<div id="inner">

    @if(Model.Question.XmlValue != null)
    { 
        var model = RedactorView.GetView((QuestionType)Model.Question.Type, Model.Quiz.Type);

        model.Question = Model.Question;

        model.Quiz = Model.Quiz;

        model.Model = XmlBase.Deserialize(Model.Question.XmlObject, Model.Question.TypeName);

        @Html.Partial("Redactor", model)
    }

</div>

