@using QuizManager.Helpers;
@using QuizManager.DBModels;
@using QuizManager.ModelViews;
@using QuizManager.Helpers.Models;
@using QuizManager.XmlModels;

@model RedactorContainerView

<div class="myhmargin">

    <div class="row myhmargin">

        <div class="pull-right myhmargin">

            <button type="button" class="btn btn-danger mycolor"
                    data-toggle="modal" data-target="#delete">
                Delete
            </button>

            <div class="modal fade" id="delete" role="dialog">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Alert</h4>
                        </div>
                        <div class="modal-body">
                            <p>Delete this Question?</p>
                        </div>
                        <div class="modal-footer">
                            @RenderHelper.ActionWithParameter(Url.Action("Delete", "Constructor"), Model.Question.Id.ToString(), "Delete", "")
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div class="pull-left form-inline myhmargin my80">

            @using (Ajax.BeginForm("Change", new AjaxOptions() { UpdateTargetId = "inner" }))
            {
                @Html.HiddenFor(x => x.Quiz.Id)
                @Html.HiddenFor(x => x.Section.Id)
                @Html.HiddenFor(x => x.Question.Id)

                <div class="form-group myvmargin">
                    @Html.DropDownListFor(x => x.Question.Type, Model.Question.Type.GetSelectList(typeof(QuestionType)), new { @class = "form-control" })
                </div>

                <div class="form-group myvmargin">
                    @Html.DropDownListFor(x => x.Question.Obligation, Model.Question.Obligation.GetSelectList(typeof(QuestionObligation)), new { @class = "form-control" })
                </div>

                <div class="form-group myvmargin">
                    @Html.LabelFor(x => x.Question.OrderNumber, "Order:")
                    @Html.TextBoxFor(x => x.Question.OrderNumber, new { type = "number", @class = "form-control", min = "1", data_toggle="tooltip", data_placement="right", title="Order of question in section"})
                </div>

                if (Model.Quiz.Type == QuizType.Adaptive &&
                    Model.Quiz.TestingType == QuizTestingType.PerQuestion)
                {
                    <div class="form-group myvmargin">
                        @Html.TextBoxFor(x => x.Question.Difficulty, 
                            new { type = "number", data_toggle="tooltip", data_placement="right", title = "Max difficulty is the highest mark for quiz",  @class = "form-control", min = "1", max = Model.Quiz.Value.ToString(), placeholder = "Difficulty", required = "required" })
                    </div>
                }

                if (Model.Quiz.TimeLimitType == QuizTimeLimitType.QuestionLimited)
                {
                    <div class="form-group myvmargin">
                        @Html.TextBoxFor(x => x.Question.TimeLimit, new { @class = "form-control", type = "time", step = "1", required = "required" })
                    </div>
                }

                <div class="form-group myvmargin">
                    <input type="submit" class="btn btn-info mycolor" value="Select/Save" />
                </div>
            }

        </div>

    </div>

</div>

<hr class="myhr" />

<div id="inner" class="myhmargin">

    @if (Model.Question.XmlValue != null)
    {
        var model = RedactorView.GetView((QuestionType)Model.Question.Type);

        model.Question = Model.Question;
        model.Section = Model.Section;
        model.Quiz = Model.Quiz;

        model.Model = XmlBase.Deserialize(Model.Question.XmlObject, Model.Question.TypeName);

        @Html.Partial("Redactor", model)
    }

</div>

