@using QuizManager.Helpers;
@using QuizManager.DBModels;
@using QuizManager.ModelViews;
@using QuizManager.Helpers.Models;
@using QuizManager.XmlModels;

@model TestListRedactorView

@{
    XmlQuestionType? type = null;
    switch (Model.Question.Type)
    {
        case QuestionType.Radio:
            type = XmlQuestionType.Radio;
            break;
        case QuestionType.Checkbox:
            type = XmlQuestionType.Checkbox;
            break;
        case QuestionType.ComboBox:
            type = XmlQuestionType.ComboBox;
            break;
    }
}

@using (Ajax.BeginForm("SaveXmlListTest", null, new AjaxOptions() { UpdateTargetId = "inner" }, new { id = "SaveForm" }))
{
    <div class="form-group pull-right myhmargin">
        @RenderHelper.InfoButtonMyColor("Use 'Plus' button to add new option. Use 'Remove' button to remove option. Drag options to order them in proper way.",
            "myhmargin")

        <input type="submit" class="btn btn-success mycolor" value="Save question" />
    </div>

    @Html.HiddenFor(x => x.Section.Id)
    @Html.HiddenFor(x => x.Question.Id)
    @Html.HiddenFor(x => x.Quiz.Id)
    <input type="hidden" name="_XmlModel.ListType" value="@type" />

    <div class="form-inline form-group myhmargin">

        @Html.TextBoxFor(x => x.Question.Value, new { @class = "form-control", type = "number", min = "1", placeholder="Max mark", data_toggle="tooltip", data_placement="right", title="Max mark for question" })

        @RenderHelper.AddOptionButton("addLink")

    </div>

    <div class="form-group myhmargin">

        @Html.TextAreaFor(x=>x.Question.Text, new { @class = "form-control", placeholder="Question text" })

    </div>

    <hr class="myhr" />

    <ul id="options" class="list-group">

        @if (Model._XmlModel != null && Model._XmlModel.Options != null)
        {
            for (int i = 0; i < Model._XmlModel.Options.Count(); ++i)
            {
                <li class="removeContainer list-group-item">

                    @Html.HiddenFor(x => x._XmlModel.Options[i].Id)

                    <div class="row myhmargin">

                        <div class="form-group pull-left my80">
                            @Html.TextBoxFor(x => x._XmlModel.Options[i].Text, new { @class = "form-control", placeholder="Option text" })
                        </div>

                        <div class="pull-right">
                            @RenderHelper.RemoveOptionButton("removeLink")
                        </div>

                        @if (type == XmlQuestionType.Radio || type == XmlQuestionType.ComboBox)
                        {
                            <div class="radio pull-right center">
                                @Html.RadioButton("Ids", Model._XmlModel.Options[i].Id, Model._XmlModel.Options[i].IsTrue)
                            </div>
                        }
                        else if (type == XmlQuestionType.Checkbox)
                        {
                            <div class="checkbox pull-right center">
                                @RenderHelper.CheckBoxSimple("Ids", Model._XmlModel.Options[i].IsTrue, Model._XmlModel.Options[i].Id.ToString())
                            </div>
                        }

                    </div>

                    <div class="form-group">

                        @Html.TextAreaFor(x => x._XmlModel.Options[i].Comment, new { @class = "form-control", placeholder = "Comment" })

                    </div>

                </li>
            }
        }

    </ul>
}

<div class="hidden">

    <li id="option" class="removeContainer list-group-item">

        <input type="hidden" />

        <div class="row myhmargin">

            <div class="form-group pull-left my80">
                <input type="text" class="form-control" placeholder="Option text" />
            </div>

            <div class="pull-right">
                @RenderHelper.RemoveOptionButton("removeLink")
            </div>

            @if (type == XmlQuestionType.ComboBox || type == XmlQuestionType.Radio)
            {
                <div class="radio pull-right center">
                    <input type="radio" name="Ids" />
                </div>
            }
            else if (type == XmlQuestionType.Checkbox)
            {
                <div class="checkbox pull-right center">
                    <input type="checkbox" name="Ids" />
                </div>
            }

        </div>

        <br />

        <div class="form-group">

            <textarea class="form-control" placeholder="Comment" />

        </div>

    </li>

</div>

