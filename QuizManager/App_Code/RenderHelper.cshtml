
@helper PlusButton(string url)
{
    <a href="@url" type="button" class="btn btn-default btn-circle btn-xl">

        <i class="fa fa-plus fa-lg"></i>

    </a>
}

@helper UpArrow(string _class)
{
    <button type="button" class="@_class btn btn-default btn-circle">

        <i class="fa fa-arrow-up"></i>

    </button>
}

@helper DownArrow(string _class)
{
    <button type="button" class="@_class btn btn-default btn-circle">

        <i class="fa fa-arrow-down"></i>

    </button>
}

@helper InfoButton(string info)
{
    <button type="button" data-toggle="tooltip" data-placement="right"
            title="@info"
            class="btn btn-info questionwell btn-circle">

        <i class="fa fa-xs"><strong>i</strong></i>

    </button>
}

@helper InfoButtonMyColor(string info, string _class = "")
{
    <button type="button" data-toggle="tooltip" data-placement="right"
            title="@info"
            class="btn btn-info mycolor btn-circle @_class">

        <i class="fa fa-xs"><strong>i</strong></i>

    </button>
}

@helper AddOptionButton(string _class)
{
    <a href="#" type="button" class="@_class btn btn-default btn-circle">

        <i class="fa fa-plus"></i>

    </a>
}

@helper RemoveOptionButton(string _class)
{
    <a href="#" type="button" class="@_class btn btn-default btn-circle">

        <i class="fa fa-close"></i>

    </a>
}

@helper VerticalTabs(IEnumerable<KeyValuePair<string, string>> name_link, string selected)
{
    <ul class="nav nav-pills nav-stacked">

        @foreach (var item in name_link)
        {
            if (selected == item.Key)
            {
                <li class="active">
                    <a href="@item.Value">
                        @item.Key
                    </a>
                </li>
            }
            else
            {
                <li><a href="@item.Value">@item.Key</a></li>
            }
        }

    </ul>
}

@helper Back(string url)
{
    <a href="@url" type="button" class="btn btn-warning mycolor">

        <i class="fa fa-arrow-left fa-lg"></i>

    </a>
}

@helper ActionWithParameter(string url, string id, string text, string _class)
{
    {
        url = url + "?id=" + id;
    }

    <a href="@url" type="button" class="btn btn-info mycolor @_class">
        @text
    </a>
}

@helper GroupSubmits(IEnumerable<int> orderNumbers)
{
    <div id="qGroup">

        @foreach (var item in orderNumbers)
        {
            <input name="value" type="submit" value="@item" class="btn btn-default btn-squared-small question choose" />
        }

    </div>
}

@helper CheckBoxSimple(string Name, bool IsChecked, string value)
{
    if (IsChecked)
    {
        <input type="checkbox" name="@Name" value="@value" checked="checked" />
    }
    else
    {
        <input type="checkbox" name="@Name" value="@value" />
    }
}

@helper CheckBoxSimpleDisabled(bool IsChecked)
{
    if (IsChecked)
    {
        <input type="checkbox" checked="checked" disabled />
    }
    else
    {
        <input type="checkbox" disabled />
    }
}

@helper CreateSquere(string QuizName, int Id,
    IEnumerable<string> Names, IEnumerable<string> Links)
{
    <div class="dropdown">

        <button data-toggle="dropdown"
                class="dropdown-toggle btn-squared-default-plain:hover btn-squared-default">
            <p class="module">
                @QuizName
            </p>
        </button>

        <ul class="dropdown-menu">

            @foreach (var item in Names.Zip(Links, (name, link) =>
                new
                {
                    Name = name,
                    Link = link
                }
            ))
            {
                var href = item.Link + "?id=" + Id;

                <li>
                    <a href="@href">@item.Name</a>
                </li>
            }

        </ul>

    </div>
}

